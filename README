EXT-PROC Plugin
===============
1. What's this?
2. Example Setup
3. UI
4. Future

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. What's this?

In a project I am working on, I need to invoke external processes. I.e.
I use latex2e to create a pdf report file. The "markup" is generated
using gsp pages and rendered to some files in a temporary folder.
Hence I need to invoke pdflatex to create the final pdf report.

I am developing this project on different machines not all of them have
latex2e installed locally. So I needed a way to invoke the external
process locally and remotely in a homegenous way.

I also use it to invoke a really expensive engineering application
where I don't have a license for each machine I am using. With this
plugin I can invoke that application as an external process and process
its output.

Of course you can also use it to invoke a simple /bin/ls but there may
be groovier approaches to that ;)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. Example Setup

The example setup will guide you to setup gnuplot. The complete
application can be found at https://github.com/hennito/ext-proc-demo.

First we need to create a domain object for the external process:

def EXTERNAL_PROCESS_GNUPLOT = "gnuplot"

String gnuplotBin = "/usr/bin/gnuplot"
def useLocal = new File(gnuplotBin).exists()

// use it
if (useLocal) {
	log.info "using local gnuplot process"
	def gnuplot = new ExternalProcess(
		name:EXTERNAL_PROCESS_GNUPLOT,
		command:gnuplotBin,
		defaultParams:[ExternalProcess.WORKDIR_PLACEHOLDER],
		workDir:ExternalProcess.NEW_WORKDIR,
		isRemote:false,
		exposeViaWS:true,	// allow remote access
		cleanUpWorkDir:true,
		returnZippedDir:true,
		timeout:15000,
		allowedFilesPatter:null,
		allowedFiles:["gnuplot.dat"],
		requiredFiles:[],
		returnFilesPattern:".*png\$",
		returnFiles:[]
	)
	gnuplot.save(failOnError:true,flush:true)
}
else {
	// use gnuplot remotely
	log.info "using remote latex process"
	def gnuplotRemote = new ExternalProcess(
		name:EXTERNAL_PROCESS_GNUPLOT,
		command:'http://hostwithgnuplot:9090/ext-proc-sample/services/externalProcess?wsdl', // TODO: CHANGEME
		workDir:"pdflatex",
		isRemote:true,
		cleanUpWorkDir:true,
		returnZippedDir:true,
		timeout:15000
	)
	gnuplotRemote.save(failOnError:true,flush:true)
}


To see if it works, we create a simple controller:

package extproc.sample

import grails.plugin.extproc.*

class InvokerController {

	def fileHandlingService
	def externalProcessService

	def sampleGnuPlot ="""set terminal png transparent nocrop enhanced font arial 8 size 420,320
set output 'gnuplotted.png'
set grid nopolar
set grid xtics nomxtics ytics nomytics noztics nomztics \
 nox2tics nomx2tics noy2tics nomy2tics nocbtics nomcbtics
set grid layerdefault   linetype 0 linewidth 1.000,  linetype 0 linewidth 1.000
set samples 21, 21
set isosamples 11, 11
set title "3D gnuplot demo"
set xlabel "X axis"
set xlabel  offset character -3, -2, 0 font "" textcolor lt -1 norotate
set xrange [ -10.0000 : 10.0000 ] noreverse nowriteback
set ylabel "Y axis"
set ylabel  offset character 3, -2, 0 font "" textcolor lt -1 rotate by 90
set yrange [ -10.0000 : 10.0000 ] noreverse nowriteback
set zlabel "Z axis"
set zlabel  offset character -5, 0, 0 font "" textcolor lt -1 norotate
splot x**2+y**2, x**2-y**2
"""

	def invoke = {
		def sampleInput = params.sampleInput ?: sampleGnuPlot

// create temp dir with the gnuplot input file
		def tempDir = fileHandlingService.createTempDir()
		def inputFile = fileHandlingService.fileInTemp(tempDir, "gnuplot.dat")
		inputFile << sampleInput

// create the input for the external process
		ExternalProcessInput input = new ExternalProcessInput()
		input.parameters = [] // ["gnuplot.dat"]
		input.zippedWorkDir = fileHandlingService.zipDir(tempDir) { fn -> "gnuplot.dat".equals(fn)}

// invoke the external process (never mind if it's local or remote
		ExternalProcessResult output = externalProcessService.executeProcess("gnuplot", input)

// check for errors
		if (output.serviceReturn != null) {
			// we have a ext proc error
			log.error "EXT-PROC error ${output.serviceReturn}"
			render "EXT-PROC error\n${output.serviceReturn}"
		} else {
			if (output.returnCode != 0) {
				// 	we have a gnuplot error
				log.error "GNUPLOT error ${output.consoleLog}"
				render "GNUPLOT error\n ${output.consoleLog}"
			}
			else {
				// all set, we got the response
				fileHandlingService.unzipByteArrayToDir(output.zippedDir, tempDir) { fn -> "gnuplotted.png".equals(fn)}
				// no we have the result file from gnuplot in the local temp dir
				File resultFile = fileHandlingService.fileInTemp(tempDir,"gnuplotted.png")
				byte[] content = resultFile.bytes
				def fileSize = content.length
				response.setContentType("image/png")
				response.setContentLength(fileSize)
				def out = response.outputStream
				out << content
				out.close()
			}
		}
	}
}

... and invoke it:
http://server:8080/ext-proc-example/invoker/invoke

You will see the lovely image generated by gnuplot.

Now install the app on a server without gnuplot installed, change the
configuration of the external process to point the external process to
your server with gnuplot.

http://other-servier:8080/ext-proc-example/invoker/invoke

Will invoke gnuplot on the server via webservice.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. UI

A simple UI is available to setup external processes and invoke them.
It is disabled by default. If you want to use it, you probably want to
setup prober security first. I.e. use spring security to restrict
access to authorized users only.

To enable the UI simply set

extproc.ui.enabled = false

in your Config.groovy to true.

After enabling the UI you can access the functionality on to the
following URL
http://{your app url}/extproc/

This allows you CRUD external processes and invoke them directly from
the UI.

Basically the UI is just to make your admin life easier. (I.e. the
gnuplot server is down for maintenance, you can temporarliy point your
process to another server, your app won't notice the difference).


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. Future

I developed this plugin because I needed this functionality in
different places. When I see, something is missing, I will add it and
I surely will improve the UI part when I have time (unlikely these
days).

The approach to write the input files to a temp folder first, zip them
before sending may or may not good. When I see in real life that I need
something better, I'll surely change things...

Contributions and feedack are welcome.
